import pytest

from hedge_maze import hedge_maze



@pytest.mark.parametrize(
    "maze, entrance, expected",
    [
        ([["+", "+", ".", "+"], [".", ".", ".", "+"], ["+", "+", "+", "."]], (1, 2), 1),
        ([["+", "+", ".", "+"], [".", ".", ".", "+"], ["+", "+", "+", "."]], (0, 2), 3),
        ([["+", "+", ".", "."], [".", ".", ".", "+"], ["+", "+", "+", "+"]], (1, 0), 3),
        ([["+", "+", "+"], [".", ".", "."], ["+", "+", "+"]], (1, 0), 2),
        ([["+", ".", ".", "."], [".", "+", "+", "+"], ["+", ".", ".", "."]], (0, 1), 1),
        ([["+", "+", ".", "+"], [".", "+", ".", "+"], ["+", ".", "+", "+"]], (0, 2), -1),
        ([["+", ".", "+", "+"], ["+", ".", ".", "+"], ["+", "+", "+", "+"]], (1, 2), 2),
        ([["+", "+", ".", "."], [".", ".", ".", "+"], ["+", "+", "+", "+"], [".", ".", ".", "+"], ["+", "+", ".", "."], ["+", ".", "+", "+"]], (5, 1), -1),
        ([["+", "+", ".", "+"], [".", ".", ".", "+"], ["+", "+", "+", "."]], (3, 5), ValueError),
        ([["+", "+", ".", "+"], [".", ".", ".", "+"], ["+", "+", "+", "."]], (0, 0), ValueError),
    ],
)
def test_hedge_maze(maze, entrance, expected):
    if expected is ValueError:
        with pytest.raises(ValueError):
            hedge_maze(maze, entrance)
    else:
        assert hedge_maze(maze, entrance) == expected